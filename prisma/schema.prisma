generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bike_type {
  bike_type_id                     String  @id @db.VarChar(50)
  bike_type_value                  String  @db.VarChar(50)
  pph                              Int
  bikes_bikes_bike_typeTobike_type bikes[] @relation("bikes_bike_typeTobike_type")
}

model bikes {
  bike_model                           String    @id @db.VarChar(50)
  bike_type                            String    @db.VarChar(50)
  weight                               Int
  is_child_safe                        Boolean
  is_available                         Boolean
  bike_location                        Int
  is_maintained                        Boolean   @default(false)
  bike_type_bikes_bike_typeTobike_type bike_type @relation("bikes_bike_typeTobike_type", fields: [bike_type], references: [bike_type_id], onDelete: NoAction, onUpdate: NoAction, map: "bikes_ibfk_1")
  location                             location  @relation(fields: [bike_location], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "bikes_ibfk_2")
  booking                              booking[]

  @@index([bike_location], map: "bike_location")
  @@index([bike_type], map: "bike_type")
}

model billing {
  id           Int      @id @default(autoincrement())
  booking_id   Int
  bike_usage   Int
  total_cost   Int
  discount     Int
  actual_cost  Int
  billing_date DateTime @db.DateTime(0)
  booking      booking  @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "billing_ibfk_1")

  @@index([booking_id], map: "booking_id")
}

model booking {
  id                                  Int       @id @default(autoincrement())
  bike_model                          String    @db.VarChar(50)
  customer                            Int
  pick_up                             Int
  drop_off                            Int?
  pick_time                           DateTime  @db.DateTime(0)
  drop_time                           DateTime? @db.DateTime(0)
  booking_date                        DateTime  @db.DateTime(0)
  billing                             billing[]
  bikes                               bikes     @relation(fields: [bike_model], references: [bike_model], onDelete: NoAction, onUpdate: NoAction, map: "booking_ibfk_1")
  customer_booking_customerTocustomer customer  @relation("booking_customerTocustomer", fields: [customer], references: [customer_id], onDelete: NoAction, onUpdate: NoAction, map: "booking_ibfk_2")
  location_booking_pick_upTolocation  location  @relation("booking_pick_upTolocation", fields: [pick_up], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "booking_ibfk_3")
  location_booking_drop_offTolocation location? @relation("booking_drop_offTolocation", fields: [drop_off], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "booking_ibfk_4")

  @@unique([bike_model, pick_up, drop_off, pick_time, drop_time], map: "bike_model")
  @@index([customer], map: "customer")
  @@index([drop_off], map: "drop_off")
  @@index([pick_up], map: "pick_up")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model customer {
  customer_id                                         Int           @id @default(autoincrement())
  first_name                                          String        @db.VarChar(50)
  last_name                                           String        @db.VarChar(50)
  date_of_birth                                       DateTime      @db.Date
  address                                             String        @db.VarChar(50)
  email                                               String        @unique(map: "email") @db.VarChar(50)
  phone                                               String        @db.VarChar(50)
  customer_type                                       String        @db.VarChar(50)
  is_student                                          Boolean       @default(false)
  booking_booking_customerTocustomer                  booking[]     @relation("booking_customerTocustomer")
  customer_type_customer_customer_typeTocustomer_type customer_type @relation("customer_customer_typeTocustomer_type", fields: [customer_type], references: [customer_type_id], onDelete: NoAction, onUpdate: NoAction, map: "customer_ibfk_1")

  @@unique([first_name, last_name, date_of_birth, address, email, phone], map: "first_name")
  @@index([customer_type], map: "customer_type")
}

model customer_type {
  customer_type_id                               String     @id @db.VarChar(50)
  customer_type_value                            String     @db.VarChar(50)
  discount                                       Int
  customer_customer_customer_typeTocustomer_type customer[] @relation("customer_customer_typeTocustomer_type")
}

model location {
  location_id                        Int       @id @default(autoincrement())
  street                             String    @db.VarChar(200)
  zip                                String    @db.VarChar(50)
  city                               String    @db.VarChar(50)
  province                           String    @db.VarChar(50)
  bikes                              bikes[]
  booking_booking_pick_upTolocation  booking[] @relation("booking_pick_upTolocation")
  booking_booking_drop_offTolocation booking[] @relation("booking_drop_offTolocation")

  @@unique([street, zip, city, province], map: "street")
}
